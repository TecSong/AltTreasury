// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v4.23.3
// source: treasury/v1/treasury.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTreasuryApproveWithdrawClaim = "/treasury.v1.Treasury/ApproveWithdrawClaim"
const OperationTreasuryCreateWithdrawClaim = "/treasury.v1.Treasury/CreateWithdrawClaim"
const OperationTreasuryGetWithdrawClaim = "/treasury.v1.Treasury/GetWithdrawClaim"
const OperationTreasuryListWithdrawClaimConfirmations = "/treasury.v1.Treasury/ListWithdrawClaimConfirmations"
const OperationTreasuryListWithdrawClaims = "/treasury.v1.Treasury/ListWithdrawClaims"
const OperationTreasuryRejectWithdrawClaim = "/treasury.v1.Treasury/RejectWithdrawClaim"

type TreasuryHTTPServer interface {
	ApproveWithdrawClaim(context.Context, *ApproveWithdrawClaimRequest) (*ApproveWithdrawClaimReply, error)
	CreateWithdrawClaim(context.Context, *CreateWithdrawClaimRequest) (*CreateWithdrawClaimReply, error)
	GetWithdrawClaim(context.Context, *GetWithdrawClaimRequest) (*GetWithdrawClaimReply, error)
	ListWithdrawClaimConfirmations(context.Context, *ListWithdrawClaimConfirmationsRequest) (*ListWithdrawClaimConfirmationsReply, error)
	ListWithdrawClaims(context.Context, *ListWithdrawClaimsRequest) (*ListWithdrawClaimsReply, error)
	RejectWithdrawClaim(context.Context, *RejectWithdrawClaimRequest) (*RejectWithdrawClaimReply, error)
}

func RegisterTreasuryHTTPServer(s *http.Server, srv TreasuryHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/withdrawals/claim", _Treasury_CreateWithdrawClaim0_HTTP_Handler(srv))
	r.GET("/v1/withdrawals/claims", _Treasury_ListWithdrawClaims0_HTTP_Handler(srv))
	r.GET("/v1/withdrawals/claims/{claim_id}", _Treasury_GetWithdrawClaim0_HTTP_Handler(srv))
	r.POST("/v1/withdrawals/claims/{claim_id}/approve", _Treasury_ApproveWithdrawClaim0_HTTP_Handler(srv))
	r.POST("/v1/withdrawals/claims/{claim_id}/reject", _Treasury_RejectWithdrawClaim0_HTTP_Handler(srv))
	r.GET("/v1/withdrawals/claims/confirmations", _Treasury_ListWithdrawClaimConfirmations0_HTTP_Handler(srv))
}

func _Treasury_CreateWithdrawClaim0_HTTP_Handler(srv TreasuryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateWithdrawClaimRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTreasuryCreateWithdrawClaim)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateWithdrawClaim(ctx, req.(*CreateWithdrawClaimRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateWithdrawClaimReply)
		return ctx.Result(200, reply)
	}
}

func _Treasury_ListWithdrawClaims0_HTTP_Handler(srv TreasuryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWithdrawClaimsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTreasuryListWithdrawClaims)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListWithdrawClaims(ctx, req.(*ListWithdrawClaimsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWithdrawClaimsReply)
		return ctx.Result(200, reply)
	}
}

func _Treasury_GetWithdrawClaim0_HTTP_Handler(srv TreasuryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWithdrawClaimRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTreasuryGetWithdrawClaim)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWithdrawClaim(ctx, req.(*GetWithdrawClaimRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWithdrawClaimReply)
		return ctx.Result(200, reply)
	}
}

func _Treasury_ApproveWithdrawClaim0_HTTP_Handler(srv TreasuryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ApproveWithdrawClaimRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTreasuryApproveWithdrawClaim)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ApproveWithdrawClaim(ctx, req.(*ApproveWithdrawClaimRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApproveWithdrawClaimReply)
		return ctx.Result(200, reply)
	}
}

func _Treasury_RejectWithdrawClaim0_HTTP_Handler(srv TreasuryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RejectWithdrawClaimRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTreasuryRejectWithdrawClaim)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RejectWithdrawClaim(ctx, req.(*RejectWithdrawClaimRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RejectWithdrawClaimReply)
		return ctx.Result(200, reply)
	}
}

func _Treasury_ListWithdrawClaimConfirmations0_HTTP_Handler(srv TreasuryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWithdrawClaimConfirmationsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTreasuryListWithdrawClaimConfirmations)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListWithdrawClaimConfirmations(ctx, req.(*ListWithdrawClaimConfirmationsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWithdrawClaimConfirmationsReply)
		return ctx.Result(200, reply)
	}
}

type TreasuryHTTPClient interface {
	ApproveWithdrawClaim(ctx context.Context, req *ApproveWithdrawClaimRequest, opts ...http.CallOption) (rsp *ApproveWithdrawClaimReply, err error)
	CreateWithdrawClaim(ctx context.Context, req *CreateWithdrawClaimRequest, opts ...http.CallOption) (rsp *CreateWithdrawClaimReply, err error)
	GetWithdrawClaim(ctx context.Context, req *GetWithdrawClaimRequest, opts ...http.CallOption) (rsp *GetWithdrawClaimReply, err error)
	ListWithdrawClaimConfirmations(ctx context.Context, req *ListWithdrawClaimConfirmationsRequest, opts ...http.CallOption) (rsp *ListWithdrawClaimConfirmationsReply, err error)
	ListWithdrawClaims(ctx context.Context, req *ListWithdrawClaimsRequest, opts ...http.CallOption) (rsp *ListWithdrawClaimsReply, err error)
	RejectWithdrawClaim(ctx context.Context, req *RejectWithdrawClaimRequest, opts ...http.CallOption) (rsp *RejectWithdrawClaimReply, err error)
}

type TreasuryHTTPClientImpl struct {
	cc *http.Client
}

func NewTreasuryHTTPClient(client *http.Client) TreasuryHTTPClient {
	return &TreasuryHTTPClientImpl{client}
}

func (c *TreasuryHTTPClientImpl) ApproveWithdrawClaim(ctx context.Context, in *ApproveWithdrawClaimRequest, opts ...http.CallOption) (*ApproveWithdrawClaimReply, error) {
	var out ApproveWithdrawClaimReply
	pattern := "/v1/withdrawals/claims/{claim_id}/approve"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTreasuryApproveWithdrawClaim))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TreasuryHTTPClientImpl) CreateWithdrawClaim(ctx context.Context, in *CreateWithdrawClaimRequest, opts ...http.CallOption) (*CreateWithdrawClaimReply, error) {
	var out CreateWithdrawClaimReply
	pattern := "/v1/withdrawals/claim"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTreasuryCreateWithdrawClaim))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TreasuryHTTPClientImpl) GetWithdrawClaim(ctx context.Context, in *GetWithdrawClaimRequest, opts ...http.CallOption) (*GetWithdrawClaimReply, error) {
	var out GetWithdrawClaimReply
	pattern := "/v1/withdrawals/claims/{claim_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTreasuryGetWithdrawClaim))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TreasuryHTTPClientImpl) ListWithdrawClaimConfirmations(ctx context.Context, in *ListWithdrawClaimConfirmationsRequest, opts ...http.CallOption) (*ListWithdrawClaimConfirmationsReply, error) {
	var out ListWithdrawClaimConfirmationsReply
	pattern := "/v1/withdrawals/claims/confirmations"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTreasuryListWithdrawClaimConfirmations))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TreasuryHTTPClientImpl) ListWithdrawClaims(ctx context.Context, in *ListWithdrawClaimsRequest, opts ...http.CallOption) (*ListWithdrawClaimsReply, error) {
	var out ListWithdrawClaimsReply
	pattern := "/v1/withdrawals/claims"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTreasuryListWithdrawClaims))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TreasuryHTTPClientImpl) RejectWithdrawClaim(ctx context.Context, in *RejectWithdrawClaimRequest, opts ...http.CallOption) (*RejectWithdrawClaimReply, error) {
	var out RejectWithdrawClaimReply
	pattern := "/v1/withdrawals/claims/{claim_id}/reject"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTreasuryRejectWithdrawClaim))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
